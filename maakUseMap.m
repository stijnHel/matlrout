function maakUseMap(S,fData,varargin)%maakUseMap - Maakt USEMAP%    maakUseMap(S,fNaam/fid[,options])%      S: struct%         name%         X: cellarray {url data alt}%             data: n x 2 array coords --> poly%                extra columns: alt, mOver, mOut%                   struct('type',<'rect'/>,'coords',[coords])%            struct-array ('url','data','alt','mOver','mOut');%      S: plotui-data%           S=[] ==> retrieved from figure (or tried)%%   options: bConcluence - imagemap for confluence page%            bRect       - force use of rectangle (plotui input)%            bClosePol   - close polynomials%% see also plotui% nog in opmaak:%      confluence%      direct gebruik van plotuibConfluence=false;bRect=false;bClosePol=false;bCreateFile=false;fName='xxx.png';if nargin>1&&ischar(fData)	fName=fData;	bCreateFile=true;else	if nargin>1		fid=fData;	else		fid=[];	end	if isempty(fid)		fid=1;	endendif ~isempty(varargin)	setoptions({'bConfluence','bRect','bClosePol'},varargin{:})endif nargin==0||isempty(S)	S=plotui('get');endif isfield(S,'L')&&isfield(S,'schaal')	S=S.L;endif isfield(S,'x')&&isfield(S,'y')	% plotui-data	X=struct('data',cell(1,length(S)));	data=struct('type',[],'coords',[]);	for i=1:length(S)		if bRect			data.type='rect'; %#ok<UNRCH>			data.coords=[min(S(i).x) min(S(i).y) max(S(i).x) max(S(i).y)];		else			data.type='poly';			data.coords=[S(i).x(:) S(i).y(:)];			if bClosePol				data.coords(end+1,:)=data.coords(1,:); %#ok<NASGU,UNRCH>			end		end		X(i).data=data;	end	S=struct('name',fName,'X',X);endif iscell(S.X)	Xs=struct('url',S.X(:,1),'data',S.X(:,2),'alt',[],'mOver',[],'mOut',[]);	if size(S.X,2)>2		[Xs.alt]=deal(S.X{:,3});		if size(S.X,2)>3			[Xs.mOver]=deal(S.X{:,4});			if size(S.X,2)>4				[Xs.mOut]=deal(S.X{:,5});			end		end	end	S.X=Xs;endfName='xxx.png';if bCreateFile	fid=fopen(fName,'w');	if fid<3		error('Kan file niet openen')	endendif bConfluence	fprintf(fid,'{imagemap:name=[%s]}\n',S.name); %#ok<UNRCH>else	fprintf(fid,'<map name="%s" id="%s">\n',S.name,S.name);endfor i=1:length(S.X)	if bConfluence		fprintf(fid,'   {map:link='); %#ok<UNRCH>	else		fprintf(fid,'   <area shape="');	end	if isfield(S.X,'url')		url=S.X(i).url;	else		url=[];	end	if ~ischar(url)		if isempty(url)			url=i;		end		url=sprintf('link#%02d',url);	end	X=S.X(i).data;	if isfield(S.X,'alt')		alt=S.X(i).alt;	else		alt=[];	end	if isfield(S.X,'mOver')		mOver=S.X(i).mOver;	else		mOver=[];	end	if isfield(S.X,'mOut')		mOut=S.X(i).mOut;	else		mOut=[];	end	if bConfluence		if ~isempty(url) %#ok<UNRCH>			fprintf(fid,'[%s]',url);			% possibility for "_blank" ?		end		if ~isempty(alt)&&false		%?how?			fprintf(fid,' alt="%s"',HTMLstring(alt));		end		if isnumeric(X)			%?possible? - how?		else			fprintf(fid,'|coords=%d,%d,%d,%d'	...				,round(X.coords));		end		fprintf(fid,'}\n');	else		if isnumeric(X)			fprintf(fid,'poly" coords="%.0f,%.0f',X(1,:));			fprintf(fid,',%.0f,%.0f',X(2:end,:)');			fprintf(fid,'"');		else			fprintf(fid,'%s" coords="',X.type);			if numel(X.coords)==4				fprintf(fid,'%.0f,%.0f,%.0f,%.0f'	...					,X.coords(1,:));			else				fprintf(fid,'%.0f,%.0f'	...					,X.coords(1,:));				fprintf(fid,',%d,%d'	...					,round(X.coords(2:end,:)'));				fprintf(fid,'"');			end		end		if ~isempty(url)			fprintf(fid,' href="%s" target="_blank"',url);		end		if ~isempty(alt)			fprintf(fid,' alt="%s"',HTMLstring(alt));		end		if ~isempty(mOver)			fprintf(fid,' onmouseover="%s;"',HTMLstring(mOver));			if ~isempty(mOut)				fprintf(fid,' onMouseOut="%s;"',HTMLstring(mOut));			end		end		fprintf(fid,'></area>\n');	endendif bConfluence	fprintf(fid,'{imagemap}\n'); %#ok<UNRCH>else	fprintf(fid,'</map>\n');endif bCreateFile	fclose(fid);endfunction s=HTMLstring(s)HTMLrep={char(142),'&eacute;';char(145),'&euml;';char(148),'&icirc;'};for i=1:length(HTMLrep)	s=strrep(s,HTMLrep{i},HTMLrep{i,2});end