function [Ys,CY]=ScaleNIdata(Yu,P)
%ScaleNIdata - Scale NI-channel
%      Ys=ScaleNIdata(S) - with S structure with data and properties fields
%      Ys=ScaleNIdata(Yu,P)
%
% (only implemented tested types! - which don't all give the right result!)
%
% see http://zone.ni.com/reference/en-XX/help/372636F-01/mstudiowebhelp/html/automaticproperties/
%     (Properties Autogenerated by the TDMS Library)

if isstruct(Yu)
	P=Yu.properties;
	idxDAQ=Yu.idx.DAQmx;
	Yu=Yu.data;
	nSig=size(Yu,2);
	if nSig>1	% suppose DAQmx-data
		YuD=Yu;
		Yu=cell(nSig,2);
		for i=1:nSig
			Yu{i}=idxDAQ.sig(i);
			Yu{i,2}=YuD(:,i);
		end
	end
end
if isnumeric(Yu)
	Yu={0,Yu};
end

if ~isfield(P,'NI_Scaling_Status')||strcmp(P.NI_Scaling_Status,'scaled')
	error('Data can''t be rescaled!')
end
nScales=P.NI_Number_Of_Scales;
CY=zeros(length(Yu{1,2}),nScales);
for i=1:size(Yu,1)
	CY(:,Yu{i}+1)=double(Yu{i,2});
end
for iScale=1:length(P.NI_Scale)
	Si=P.NI_Scale{iScale};
	if ~isempty(Si)
		switch Si.Scale_Type
			case 'Linear'
				Xi=CY(:,Si.Linear_Input_Source+1);
				a=Si.Linear_Slope;
				b=Si.Linear_Y_Intercept;
				Yi=Xi*a+b;
			case 'Polynomial'
				Xi=CY(:,Si.Polynomial_Input_Source+1);
				pPol=Si.Polynomial_Coefficients(end:-1:1)';
				Yi=polyval(pPol,Xi);
			case 'Add'
				Xi1=CY(:,Si.Add_Left_Operand_Input_Source+1);
				Xi2=CY(:,Si.Add_Right_Operand_Input_Source+1);
				Yi=Xi1+Xi2;
			case 'Subtract'
				Xi1=CY(:,Si.Subtract_Left_Operand_Input_Source+1);
				Xi2=CY(:,Si.Subtract_Right_Operand_Input_Source+1);
				Yi=Xi1-Xi2;
			case 'Thermocouple'
				Xi=CY(:,Si.Thermocouple_Input_Source+1);
				switch Si.Thermocouple_Thermocouple_Type
					case 10072
						TCtyp='J';
					case 10073
						TCtyp='K';
					case 10077
						TCtyp='N';
					case 10082
						TCtyp='R';
					case 10085
						TCtyp='S';
					case 10086
						TCtyp='T';
					case 10047
						TCtyp='B';
					case 10055
						TCtyp='E';
					otherwise
						error('Unknown TC-type (%d)',Si.Thermocouple_Thermocouple_Type)
				end
				if Si.Thermocouple_Scaling_Direction	% T --> V
					Yi=tcconversion(Xi,[],TCtyp,true)*1e3;	% T --> uV
				else	% V --> T
					Yi=tcconversion(Xi/1000,[],TCtyp);	% uV --> T
				end
			case 'Thermistor'
				Xi=CY(:,Si.Thermistor_Input_Source+1);
				%warning('Termistor scaling is not implemented')
				switch Si.Thermistor_Excitation_Type
					case 10322	% voltage excitation
						R = Xi*Si.Thermistor_R1_Reference_Resistance./(Si.Thermistor_Excitation_Value-Xi);
					case 10134	% current excitation
						R = Xi/Si.Thermistor_Excitation_Value;
					otherwise
						error('Unexpected excitation type (%d)',Si.Thermistor_Excitation_Type)
				end
				Yi = 1./(Si.Thermistor_A+Si.Thermistor_B*log(R)+Si.Thermistor_C*log(R).^3)-Si.Thermistor_Temperature_Offset;
			case 'Table'
				Xi=CY(:,Si.Table_Input_Source+1);
				Yi=interp1(Si.Table_Pre_Scaled_Values,Si.Table_Scaled_Values,Xi);
			otherwise
				warning('LEESTDMS:scalingUnknown','Unknown scaling type (%s)',Si.Scale_Type)
		end		% switch scale-type
		CY(:,iScale)=Yi;
	end
end

Ys=CY(:,nScales);
