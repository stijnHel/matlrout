function [pos,H,plaatsnaam,dPos]=geogcoor(in,varargin)% GEOGCOOR - Geeft geografische coordinaten%    [pos,H]=geogcoor(in)%   met geogcoor lijst%      wordt de volledige beschikbare lijst gegeven (voorlopig beperkt!)%    [pos,H]=geogcoor('<land>:<gemeente>')%          bijvoorbeeld: geogcoor('belgie:aalst')%% extra%    [pos,H,plaatsnaam,dA] = geogcoor(pos);%          zoekt de dichtst bijzijnde plaats%    geogcoor AddAll - Adds all data from used countries in the list% * Maybe things related to finding country-data can be simplified by%   extended functionality of ReadESRI!%   (!!!) cGeography should be used!!!persistent GEOGcoordatapersistent WORLD COUNTRIESif isempty(COUNTRIES)	COUNTRIES = struct();end[bDegrees] = false;dPosMin = 0.0001;if isempty(GEOGcoordata)	GEOGcoordata={'Ukkel',[4,21,29.20,50,47,72],104.9;	... gr,'," OL,gr,',",NB,hoogte		'Alken-Helsen',[5 16 18 50 51 45],51;	...		'Kessel-Lo-Helsen',[4 45 30 50 53 5],50;		'Boston',[74 05 0 42 20 0],0;		'La-Palma-Roque-de-los-Muchachos',[-17 -53 0 28 46 0],2500;	...	28°46?N 17°53?W? / wikipedia		'Viljandi_Estonia',[25 35 0 58 21 0],0;		'station-berchem',[4.43101 51.20011],0;		'ACA-Wilrijk',[4.38569 51.14915],0;		'station-Hasselt',[5.32613 50.92993],0;		'Heggy-Tanyak',[16.339604 46.993013],0;		'Heverlee',[4.680158 50.860432],24;		'Ransberg',[5.031596,50.862251],49;		'Pyr_Bie',[1.27512833,42.85554333],620;		'Alnarp',[13 5 0 55 39 0],0;		'Arvidsjaur',[19 11 0 65 36 0],0;		'Arjeplog',[17 53 0 66 3 0 ],0;		'Copenhagen',[12.5658,55.6772],0;		'Utsjoki',[27 1 0,69  54 0],0;		'Salacgriva',[24.379569984574306,57.769323482857985],0;	... Letland		'Juupajoki',[24.361840 61.800633],0;	... Finland		'Trondheim',[10 23 36,63 25 47],0;	... Noorwegen		'Dilolo',[22.3208036,-10.6965935],0	... Congo		};	coor=zeros(size(GEOGcoordata,1),2);	for i=1:size(GEOGcoordata,1)		c1=GEOGcoordata{i,2};		if length(c1)==6			c1=c1*[1 1/60 1/3600 0 0 0;0 0 0 1 1/60 1/3600]'*pi/180;		elseif length(c1)==2			c1=c1*(pi/180);		else			error('Wrong input')		end		coor(i,:)=c1;	end	ccoor=num2cell(coor,2);	[GEOGcoordata{:,2}]=deal(ccoor{:});endif nargin==0	pos=GEOGcoordata(:,1);	returnelseif ~isempty(varargin)	setoptions({'bDegrees','dPosMin'},varargin{:})endif isnumeric(in)	if size(in,1)==1&&size(in,2)==2		in=in';	end	if size(in,1)~=2||size(in,2)<1||size(in,2)>3		error('Wrong input!')	end	if size(in,2)<2		pos = deg2rad(in)';	elseif size(in,2)==2		pos = (in*([1;1/60]*(pi/180)))';	else		pos = (in*([1;1/60;1/3600]*(pi/180)))';	end	H=0;	if nargout>2		Dpos = sum((cat(1,GEOGcoordata{:,2})-pos).^2,2);		[dPos,iMin] = min(Dpos);		dPos = sqrt(dPos);		if dPos>dPosMin  && ~isempty(COUNTRIES)			posDeg = pos*180/pi;			dPosDeg = dPos*180/pi;			fn = fieldnames(COUNTRIES);			for iCntry = 1:length(fn)				Dpos = sum((COUNTRIES.(fn{iCntry}).Coor-posDeg).^2,2);				[dPos1,iMin1] = min(Dpos);				if dPos1<dPosDeg					fullName = [fn{iCntry},':',COUNTRIES.(fn{iCntry}).Names{iMin1}];					iMin = size(GEOGcoordata,1)+1;					GEOGcoordata{iMin,1} = fullName;					GEOGcoordata{iMin,2} = COUNTRIES.(fn{iCntry}).Coor(iMin1,:)*pi/180;					GEOGcoordata{iMin,3} = 0;					dPosDeg = dPos1;					dPos = dPos*pi/180;				end			end		end		plaatsnaam = GEOGcoordata{iMin};	endelse	if strcmpi(in,'lijst')		if nargout			pos=GEOGcoordata;		else			for i=1:size(GEOGcoordata,1)		%		fprintf('%-20s : %2d¡%02d''%05.2f" ; OL %2d¡%02d''%05.2f" NB ; %g m\n'	...		%			,GEOGcoordata{i,1:3});				fprintf('%-20s : %8.5f ¡ ; OL %8.5f" NB ; %g m\n'	...					,GEOGcoordata{i,1},GEOGcoordata{i,2}*180/pi,GEOGcoordata{i,3});			end		end		return	elseif strcmpi(in,'addall')		if ~isempty(COUNTRIES)			fn = fieldnames(COUNTRIES);			for iCntry = 1:length(fn)				C = COUNTRIES.(fn{iCntry});				for i = 1:length(C.Names)					C.Names{i} = [fn{iCntry},':',C.Names{i}];				end				[newNames,ii] = setdiff(C.Names,GEOGcoordata(:,1));				if ~isempty(newNames)					nCurrent = size(GEOGcoordata,1);					GEOGcoordata(nCurrent+1:nCurrent+length(newNames),1) = newNames;					[GEOGcoordata{nCurrent+1:nCurrent+length(newNames),3}] = deal(0);					for i = 1:length(newNames)						GEOGcoordata{nCurrent+i,2} = C.Coor(ii(i),:)*pi/180;					end				end			end		end		return	end	[~,i] = FindName(in,GEOGcoordata(:,1));	% The following functionality starts to be integrated into ReadESRI!!	if isempty(i)		pth = FindFolder('borders',0,'-bAppend');		if exist(pth,'dir') && any(in==':')			bCountryFound = false;			P = regexp(in,':','split');			CountryData = ReadTransTable(fullfile(pth,'countries.txt'),true);			bOK = false;			for iC = 1:size(CountryData,1)				if ~bOK && any(startsWith(CountryData{iC,2},P{1},'IgnoreCase',true))					countryPath = CountryData{iC};					countryName = CountryData{iC,2};					if iscell(countryName)						countryName = countryName{1};					end					country = countryName;					if strcmp(P{2},'#')						iNr = find(countryPath=='_',1,'last');						d = dir(fullfile(pth,[countryPath(1:iNr),'*.shp']));						pos = length(d);						H = d;						return					elseif length(P)>2						nr = sscanf(P{2},'%d');						if isempty(nr)							error('Wrong format!')						end						iNr = find(countryPath=='_',1,'last');						nrDefault = sscanf(countryPath(iNr+1:end),'%d');						if nrDefault~=nr							country = sprintf('%s_%d',country,nr);							countryPath = [countryPath(1:iNr) num2str(nr)];						end						P(2) = [];					end					bCountryFound = true;					if isfield(COUNTRIES,country)						C = COUNTRIES.(country);					else						X = ReadESRI(fullfile(pth,countryPath));							%!!!!!!!!!!!!!!move borders!!!!						[Z,~,Nc]=ReadESRI(X,'getCoor','all');						Pp = zeros(length(Z),2);						for i=1:length(Z)							Zi = Z{i};							if iscell(Zi)								Zi = cat(1,Zi{:});							end							Pp(i,:) = mean(Zi(~isnan(Zi(:,1)),:),1);						end						C = struct('Names',{Nc},'Coor',Pp);						COUNTRIES.(country) = C;					end					if strcmp(P{2},'?')						pos = C.Names;						return					end					[B,~,B0] = FindName(P{2},C.Names);					if sum(B)~=1 && any(B0)						warning('Multiple possibilities: (the first is taken(!!))')						printstr(C.Names(B0));						B(find(B0,1)) = true;					end					if any(B)						fullName = [countryName,':',C.Names{B}];						B1 = strcmp(GEOGcoordata(:,1),fullName);						if any(B1)	% already existing!							i = find(B1);						else	% add in list							i = size(GEOGcoordata,1)+1;							GEOGcoordata{i,1} = fullName;							GEOGcoordata{i,2} = C.Coor(B,:)*pi/180;							GEOGcoordata{i,3} = 0;						end						bOK = true;					end					break				end			end		% for iC			if ~bOK				if bCountryFound					error('Country (%s) found, but not the city (%s)',P{:})				else					error('Country (%s) not found!',P{1})				end			end		else	% if country supplied			if isempty(WORLD)				WORLD = ReadWorld();			end			try		% maybe just the name of a country?				[pos,name] = ReadWorld(WORLD,in,'pos');				i = size(GEOGcoordata,1)+1;				GEOGcoordata{i,1} = name;				GEOGcoordata{i,2} = pos*pi/180;				GEOGcoordata{i,3} = 0;			catch				i = [];			end		end		if isempty(i)			error('coordinaten niet gevonden')		end	elseif length(i)>1		printstr(GEOGcoordata(i,1));		error('Meerdere mogelijkheden voor geografische posities')	end	pos = GEOGcoordata{i,2};	H = GEOGcoordata{i,3};	plaatsnaam = GEOGcoordata{i};endif bDegrees	pos=pos*(180/pi);	if nargout>3		dPos = dPos*180/pi;	endendfunction [B,i,B0] = FindName(name,list)B = startsWith(list,name,'IgnoreCase',true);B0 = B;if sum(B)>1	B = strcmpi(list,name);	nB = sum(B);	if nB~=1		if nB			B0(:) = B;		end		B = startsWith(list,name);		nB2 = sum(B);		if nB2>1			if nB2<nB				B0(:) = B;			end			B = strcmp(list,name);		end	endendif nargout>1	i = find(B);end