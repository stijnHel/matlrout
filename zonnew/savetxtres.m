function Sdata=savetxtres(fn,varargin)%SAVETXTRES - Bewaart numerieke resultaten% !!!!!gemaakt voor een bepaalde configuratie, sommige delen zijn algemeen, andere niet!!![bTeken]=0;bCentrMer=1;extraLimit=[];if ~isempty(varargin)	if length(varargin)==1		opties=varargin{1};	else		opties=varargin;	end	if ~iscell(opties)||rem(length(opties),2)		error('Verkeerde opties')	end	mOpties={'bTeken','bCentrMer','extraLimit'};	UMO=upper(mOpties);	for i=1:2:length(opties)		j=strmatch(upper(opties{i}),UMO,'exact');		if ~isempty(j)			assignval(mOpties{j},opties{i+1});		end	endendf=findobj('Type','figure','Tag','Huiszicht');if isempty(f)	error('Kan geen venster vinden')endSdata=struct('type',{},'lijn',{},'X',{},'Y',{},'Z',{});D=get(f,'userdata');if ~exist('fn','var')	fn='';endif ischar(fn)	if isempty(fn)		fn='analemmares.txt';	end	fid=fopen(fn,'w');else	fid=fn;endfprintf(fid,'Resultaten Analemma-berekeningen\n');[deg,mn,sc]=rad2degS(D.ZWs(1).S.geog([2 1]));fprintf(fid,'geografische positie : %d gr%02d''%04.1f" NB, %d gr%02d''%04.1f" OL\n',[deg;mn;sc]);fprintf(fid,'hoek met zuiden : %4.1 graden\n',abs(D.hoekZuiden));fprintf(fid,'Afstand spiegel : %g m van muur, op hoogte %g verondersteld, zonder breking van glas.\n',D.spiegel(2),D.spiegel(3));fprintf(fid,'     (moet glas een anti-reflectie coating hebben?)\n');fprintf(fid,'  Coordinaten van reflectie op lokaal middaguur, en een uur voor en na werden berekend.\n');d=calccaldate(D.ZWs(1).JD(1,2));fprintf(fid,'      lokaal middaguur : %d:%02d:%02.0f\n',d(4:6));fprintf(fid,'\n');fprintf(fid,'coordinaten (X - volgens muur, horizontaal, Y - loodrecht op muur, richting "ongeveer zuiden", Z - vertikaal)\n');fprintf(fid,'    afstanden uitgedrukt in m\n');fprintf(fid,'Eerst wordt een lijst gegeven met enkel de 21ste van de maand.\n   Verder volgt een volledige lijst voor 1 jaar.\n');fprintf(fid,'datum\tX\tY\tZ\tX\tY\tZ\tX\tY\tZ\n');fprintf(fid,'\t\t%g uur voor\t\tlokale middag\t\t%g uur na\n',(D.ZWs(1).JD(1,2)-D.ZWs(1).JD(1,1))*24,(D.ZWs(1).JD(1,3)-D.ZWs(1).JD(1,2))*24);for i=1:length(D.ZWs(1).JD)	d=calccaldate(D.ZWs(1).JD(i,1));	if d(1)==21		fprintf(fid,'%d:%02d:%04d',d(1:3));		%proj=squeeze(D.ZWs(1).P1(i,:,:));		proj=squeeze(D.ZWs(1).P2_3D(i,:,:));		fprintf(fid,'\t%5.3f',proj');		fprintf(fid,'\n');	endendfprintf(fid,'\n\nNu De volledige lijst :\n');for i=1:length(D.ZWs(1).JD)	d=calccaldate(D.ZWs(1).JD(i,1));	fprintf(fid,'%d:%02d:%04d',d(1:3));	%proj=squeeze(D.ZWs(1).P1(i,:,:));	proj=squeeze(D.ZWs(1).P2_3D(i,:,:));	fprintf(fid,'\t%5.3f',proj');	fprintf(fid,'\n');endfor i=1:size(D.ZWs(1).JD,2)	Sdata(end+1).type='3Ddata';	Sdata(end).lijn=0;	Sdata(end).X=squeeze(D.ZWs(1).P2_3D(:,i,1));	Sdata(end).Y=squeeze(D.ZWs(1).P2_3D(:,i,2));	Sdata(end).Z=squeeze(D.ZWs(1).P2_3D(:,i,3));endfprintf(fid,'\n\nAlle 3D-lijnen\n');fprintf(fid,'Meridiaan :');l=findobj(f,'Tag','meridiaan');for i=1:length(l)	fprintf(fid,'\n');	X=get(l(i),'XData');	Y=get(l(i),'YData');	Z=get(l(i),'ZData');	fprintf(fid,'%5.3f\t%5.3f\t%5.3f\n',[X;Y;Z]);	Sdata(end+1).type='meridiaan';	Sdata(end).lijn=l(i);	Sdata(end).X=X;	Sdata(end).Y=Y;	Sdata(end).Z=Z;	j=find(Y==0);	Xmer=mean(X(j));endfprintf(fid,'\n\nLijnen :\n');l=findobj(f,'Tag','HZWlijn');for i=1:length(l)	fprintf(fid,'\n\n');	X=get(l(i),'XData');	Y=get(l(i),'YData');	Z=get(l(i),'ZData');	fprintf(fid,'%5.3f\t%5.3f\t%5.3f\n',[X;Y;Z]);	Sdata(end+1).type='ZWlijn';	Sdata(end).lijn=l(i);	Sdata(end).X=X;	Sdata(end).Y=Y;	Sdata(end).Z=Z;endl=findobj(f,'Tag','HZWlijn1');if ~isempty(l)	fprintf(fid,'\n\nLijnen :\n');	for i=1:length(l)		fprintf(fid,'\n\n');		X=get(l(i),'XData');		Y=get(l(i),'YData');		Z=get(l(i),'ZData');		fprintf(fid,'%5.3f\t%5.3f\t%5.3f\n',[X;Y;Z]);		Sdata(end+1).type='ZWlijn1';		Sdata(end).lijn=l(i);		Sdata(end).X=X;		Sdata(end).Y=Y;		Sdata(end).Z=Z;	endendif ischar(fn)	fclose(fid);endif bTeken	nfigure	delete(plot(0,0))	grid	xmin=inf;	xmax=-inf;	Omarkers=zeros(0,2);	for i=1:length(Sdata)		if Sdata(i).lijn			j=find(abs(Sdata(i).Y)<1e-8);			if ~isempty(j)				l=Sdata(i).lijn;				X=Sdata(i).X(j);				if bCentrMer					X=Xmer-X;				end				Z=Sdata(i).Z(j);				mark=get(l,'marker');				if ~isempty(extraLimit)					Xlaag=X<extraLimit(1);					Xhoog=X>extraLimit(2);					Zlaag=Z<extraLimit(3);					Zhoog=Z>extraLimit(4);					Xnok=double(Xlaag|Xhoog|Zlaag|Zhoog);					if any(Xnok)						if strcmp(mark,'none')							j=2;							X=X(:);							Z=Z(:);							Xnok=Xnok(:);							while j<=length(X)								if max(0,Xnok(j))~=max(0,Xnok(j-1))									if j<length(X)&&Xnok(j-1)==1&&Xnok(j+1)==1										X=X([1:j j:end]);										Z=Z([1:j j:end]);										Xnok=Xnok([1:j j:end]);									end									l1=line(X(j-1:j),Z(j-1:j),'linewidth',5,'color',[1 0 0]);									jj=j-1:j;									[X(jj),Z(jj),Xnok(jj)]=calclim(X(jj),Z(jj),extraLimit,Xnok(jj));									l2=line(X(j-1:j),Z(j-1:j),'linewidth',3,'color',[0 1 0]);									delete([l1 l2])								elseif ~Xnok(j)									%zoeken naar lijnstukken tussen twee punten die toch binnen genzen valt?								end								j=j+1;							end						end						X=X(Xnok<1);						Z=Z(Xnok<1);					end				end				if ~isempty(X)					line(X,Z,'color',get(l,'color'),'linestyle',get(l,'linestyle'),'marker',mark)					xmin=min(xmin,min(X));					xmax=max(xmax,max(X));					if strcmp(mark,'o')						Omarkers(end+1,:)=[max(X),max(Z)];	% max eigenlijk niet nodig, maar je weet maar nooit					end				end			end	% if ~isempty		end	% if lijn	end	% for i	ymax=-inf;	for i=1:size(D.ZWs(1).JD,2)		d=calccaldate(D.ZWs(1).JD(1,i));		[y,j]=max(D.ZWs(1).P2_3D(:,i,3));		x=D.ZWs(1).P2_3D(j,i,1);		if bCentrMer			x=Xmer-x;		end		if abs(x)<0.1			x=max(0,x);		end		ymax=max(ymax,y);		text(x,y,sprintf('%02d:%02d',d(4:5)),'horizontalal','left','verticalal','bottom')	end	% for i	text(xmax,ymax,sprintf('%d^o%02d''%02.0f" NB\n%d^o%02d''%02.0f" OL',[deg;mn;sc])	...		,'verticalal','bottom','horizontalal','right');	[yO,i]=max(Omarkers(:,2));	text(Omarkers(i),yO,'12:00','horizontalal','left','verticalal','bottom')	axis equal	if ~isempty(extraLimit)		axis(extraLimit)	endendfunction [X,Y,nOK]=calclim(X,Y,lim,nOK)% CALCLIM - Bepaalt limiet-punt tussen twee punten op rechthoekige limietL=inf;dX=diff(X);dY=diff(Y);if min(X)<lim(1)	L=lim(1);elseif max(X)>lim(2)	L=lim(2);endif ~isinf(L)	r=(L-X(1))/dX;	if nOK(1)		X(1)=L;		Y(1)=Y(1)+r*dY;		nOK(1)=0;	else		X(2)=L;		Y(2)=Y(1)+r*dY;		nOK(2)=-1;	end	dX=diff(X);	dY=diff(Y);endL=inf;if min(Y)<lim(3)	L=lim(3);elseif max(Y)>lim(4)	L=lim(4);endif ~isinf(L)	r=(L-Y(1))/dY;	if nOK(1)		X(1)=X(1)+r*dX;		Y(1)=L;		nOK(1)=0;	else		X(2)=X(1)+r*dX;		Y(2)=L;		nOK(2)=-1;	endend