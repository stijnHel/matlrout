function [glongout,lat,R,acoor]=calcsc(d,m,j,simple)% CALCSC - Berekent solar coordinates%   hoeken in radialen, afstanden in km%   ref Astronomical Algorithms - J. Meeuws - chap. 25if nargin==1	if length(d)>1||all(d>1000)		T=calcjc(d);	else		T=d;	endelseif nargin==2	if size(d,2)>1||all(d>1000)		T=calcjc(d);	else		T=d;	end	simple=m;else	T=calcjc(d,m,j);endif ~exist('simple','var')	simple=1;endif simple	L0=(280.46646+(36000.76983+0.0003032*T)*T)/180*pi;	M=(357.52911+(35999.05029+0.0001537*T)*T)/180*pi;	e=0.016708634-(0.000042037+0.0000001267*T)*T;	C=((1.914602-(0.004817+0.000014*T)*T)*sin(M)	...		+(0.019993-0.000101*T)*sin(2*M)	...		+0.000289*sin(3*M))/180*pi;	glong=L0+C;	glong=glong-floor(glong/2/pi)*2*pi;	lat=0;	nu=M+C;	R=unitcon((1.000001018*(1-e*e))/(1+e*cos(nu)),'AU','km');	if nargout>3		if glong<180			acoor=[glong+180 0];		else			acoor=[glong-180 0];		end	endelse	[glong,lat,R]=calcvsop87('aarde',T/10);	if nargout>3		acoor=[glong lat];	end	lat=-lat;	if glong<=pi		glong=glong+pi;	else		glong=glong-pi;	end	R=R*149597870.691;	%	R=unitcon(R,'AU','km');endif nargout==0	fprintf('%10.6f¡ (%8.5f rad)  %10.6f¡ (%8.5f rad)    - %8.3f km\n'	...		,glong*180/pi,glong,lat*180/pi,lat,R)elseif nargout==1	glongout=[glong,lat,R];else	glongout=glong;end