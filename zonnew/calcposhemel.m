function [pout,interm]=calcposhemel(pos,T,el,opties)% CALCPOSHEMEL - Berekent positie element aan de hemel%     p=calcposhemel(pos,T,el[,opties])%%   ref Astronomical Algorithms - J. Meeuws - chap. 13, 16, 22, 25, 26, 40 (ea)%%  !!!!!dit moet nog goed nagekeken en gecorrigeerd worden%       gemengde data VSOP87 en andere. (ref. pos. niet VSOP!)global STAR_LIST STAR_NAMESpersistent GEOG_pos GEOG_HbAtmCor=true;H=0;if ~exist('pos','var')||isempty(pos)	if isempty(GEOG_pos)		[GEOG_pos,GEOG_H]=geogcoor('ukkel');	end	pos=GEOG_pos;	H=GEOG_H;endif ~exist('T','var')||isempty(T)	T=getutctime;endif ~exist('el','var')	el=[];elseif ischar(el)&&any(strcmpi(el,{'planets','planeten','plan'}))	el = {'mercurius','venus','mars','jupiter','saturnus','uranus','neptunus','pluto'};endif length(T)>1||all(T>1000)	T=calcjc(T);endif ischar(pos)||min(size(pos))>1	[pos,H]=geogcoor(pos);elseif length(pos)>2	H=pos(3);endif any(abs(pos(1:2))>7)	% degrees	pos(1:2)=pos(1:2)*pi/180;endif exist('opties','var')&&~isempty(opties)	setoptions({'bAtmCor'},opties)endif ischar(el)&&strcmpi(el,'all')	el=calcvsop87('','list');	el(strcmp(el,'aarde'))={'zon'};endif iscell(el)	if ~exist('opties','var')		opties={};	end	out=cell(1,nargout);	if nargout>0		pout=zeros(length(T),2,length(el));		interm=cell(1,length(el));	end	for i=1:length(el)		if nargout==0			fprintf('%2d. Element: %s\n',i,el{i})		end		[out{:}]=calcposhemel(pos,T,el{i},opties);		if nargout>0			pout(:,:,i)=out{1};			if nargout>1				interm{i}=out{2};			end		end	end	if nargout>1		interm=[interm{:}];	end	returnendaber_cor=0;	% !!!bSter=0;if isempty(el)	el='zon';elseif ischar(el)	if strcmpi(el(1:min(5,end)),'ster:')		bSter=1;		el=el(6:end);	endelseif isnumeric(el)	iel=el;	bSter=1;elseif isstruct(el)	bSter=1;endif bSter	if isempty(STAR_LIST)		load ybs		STAR_LIST=star_list;	end	if isempty(STAR_NAMES)		STAR_NAMES=lower({STAR_LIST.Name});	end	if ischar(el)		iel=find(strncmpi(el,STAR_NAMES,length(el)));		if isempty(iel)			error('Kan ster niet vinden')		elseif length(iel)>1			iel1=find(strcmpi(el,STAR_NAMES));			if isscalar(iel1)				iel = iel1;			else				warning('Meerdere sterren gevonden')				fprintf('%s,',STAR_NAMES{iel(1:end-1)})				fprintf('%s : de eerste wordt genomen\n',STAR_NAMES{iel(end)})			end		end	end	if ~isstruct(el)		el=STAR_LIST(iel);	end	if ischar(el.Ra)		el.Ra=charangle2rad(el.Ra,1);	end	if ischar(el.Decl)		el.Decl=charangle2rad(el.Decl,0);	end	glong=el.Ra;	glat=el.Decl;	D=[];elseif strcmpi(el,'zon')||strcmpi(el,'sun')	[glong,glat,D]=calcsc(T,0);	D=D*1000;	aber_cor=(-20.4898/3600/180*pi*1.49597870691e11)./D; % form. 25.10		%kan nauwkeurigerelseif strcmpi(el,'maan')	[glong,glat,D]=calclunarc(T);	D=D*1000;else	Dvsop=calcvsop87(el,'zoek');	if isempty(Dvsop)		switch lower(el)		case 'pluto'			[Xe,Ye,Ze]=calcpluto(T,1);			Xe=unitcon(Xe,'AU','m');			Ye=unitcon(Ye,'AU','m');			Ze=unitcon(Ze,'AU','m');			typeCalc=1;		otherwise			error('Onbekend element');		end	else	% VSOP		[Le,Be,Re]=calcvsop87(Dvsop,T/10);		Re=unitcon(Re,'AU','m');		Xe=Re.*cos(Be).*cos(Le);		Ye=Re.*cos(Be).*sin(Le);		Ze=Re.*sin(Be);		typeCalc=2;	end	% bepaling van positie van aarde (tov zon)	[slong,slat,R]=calcsc(T,0);	R=R*1000;	% R was in km, maar andere eenheden zijn in m	Xa=-R.*cos(slat).*cos(slong);	Ya=-R.*cos(slat).*sin(slong);	Za=-R.*sin(slat);	dX=Xe-Xa;	dY=Ye-Ya;	dZ=Ze-Za;	% corrigeer voor eindige snelheid licht	% 	D=sqrt(dX.*dX+dY.*dY+dZ.*dZ);	dT=D/299792458;	% seconden	dT=dT/3600/24/36525;	% centuries	switch typeCalc	case 1	% pluto		[Xe,Ye,Ze]=calcpluto(T-dT,1);		Xe=unitcon(Xe,'AU','m');		Ye=unitcon(Ye,'AU','m');		Ze=unitcon(Ze,'AU','m');	case 2	% VSOP87		[Le,Be,Re]=calcvsop87(Dvsop,(T-dT)/10);		Re=unitcon(Re,'AU','m');		Xe=Re.*cos(Be).*cos(Le);		Ye=Re.*cos(Be).*sin(Le);		Ze=Re.*sin(Be);	end	dX=Xe-Xa;	dY=Ye-Ya;	dZ=Ze-Za;	glong=atan2(dY,dX);	glat=atan2(dZ,sqrt(dX.*dX+dY.*dY));end[eps,deps,eps0,dpsi]=calcobl(T);t_sr=calctsidereal(T);t_lh=t_sr+dpsi.*cos(eps);applong=glong+dpsi+aber_cor;geocoor=ecli2equcoor(applong,glat,eps);local_hour=t_lh+pos(1)-geocoor(:,1);local_hour=local_hour-floor(local_hour/(2*pi))*2*pi;% correction for parallax (chap 40)if isempty(D)	sinpar=0;else	%sinpar=sin(8.794/3600/180*pi)/unitcon(D,'m','AU');	sinpar=6378032.67748./D;end% invloed afplatting aarde (chap 11)u=atan(0.99664719*tan(pos(2)));rsinp=0.99664719*sin(u)+H/6378140*sin(pos(1));rcosp=cos(u)+H/6378140*cos(pos(1));dalpha=atan2(-rcosp*sinpar.*sin(local_hour),cos(geocoor(:,2))-rcosp.*sinpar.*cos(local_hour));alpha=geocoor(:,1)+dalpha;	% ??alpha niet gebruikt?delta=atan2((sin(geocoor(:,2))-rsinp*sinpar).*cos(dalpha),cos(geocoor(:,2))-rcosp*sinpar.*cos(local_hour));local_hourpara=local_hour-dalpha;[A,h0]=tolocalhorizcoor(local_hourpara,pos(2),delta);if bAtmCor	h0_=max(h0,-0.010016);	atmrefrcor=1.02./tan(h0_+10.3./(h0_*180/pi+5.11)*pi/180)/60/180*pi;	h=h0+atmrefrcor;else	atmrefrcor=[];	h=h0;endp=[A h];if nargout==0	fprintf('azimuth : %6.2f, hoogte %6.2f\n',p'*180/pi)else	pout=p;	if nargout>1		interm=struct('T',T	...			,'eps',eps	...			,'deps',deps	...			,'eps0',eps0	...			,'dpsi',dpsi	...			,'tsidereal',t_sr	...			,'aber_cor',aber_cor	...			,'applong',applong	...			,'geocoor',geocoor	...			,'tlocal',local_hour	...			,'dalpha',dalpha	...			,'alpha',alpha	...			,'delta',delta	...			,'tlocalpar',local_hourpara	...			,'h0',h0	...			,'atmrefrcor',atmrefrcor	...			,'D',D	...			);	endendfunction h=charangle2rad(s,bhour)bNegative = s(1)=='-';if bNegative	s(1)=' ';endi=find(s==':'|s=='-'|s=='g'|s=='''');if length(i)~=2	error('Verkeerde hoek in char-formaat')endh=(str2double(s(1:i(1)-1))+(str2double(s(i(1)+1:i(2)-1))+str2double(s(i(2)+1:end))/60)/60)*pi;if bNegative	h = -h;endif bhour	h=h/12;else	h=h/180;	% degreesend